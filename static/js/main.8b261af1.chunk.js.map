{"version":3,"sources":["NewItem.js","Task.js","Tasks.js","Select.js","App.js","serviceWorker.js","index.js"],"names":["NewItem","state","value","handleClick","e","_this","setState","target","handleAdd","preventDefault","props","addTask","react_default","a","createElement","className","type","this","onChange","placeholder","onClick","React","Component","Task","content","doneTask","bind","id","icon","Tasks","done","active","_this2","tasks","length","filtr","filter","task","doneItems","map","item","src_Task","key","Items","deleteTask","Select","handleSelect","changeFilter","App","index","toAdd","obj","push","forEach","i","src_NewItem","src_Tasks","src_Select","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b261af1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style/NewItem.css';\r\nclass NewItem extends React.Component{\r\n  state = {\r\n    value: \"\",\r\n  }\r\n\r\n handleClick = (e) => {\r\n   this.setState({\r\n     value: e.target.value,\r\n   })\r\n }\r\n\r\n handleAdd = (e) => {\r\n  e.preventDefault();\r\n  if(this.state.value === \"\")\r\n    return;\r\n   this.props.addTask(this.state.value);\r\n   this.setState({\r\n     value: '',\r\n   })\r\n }\r\n\r\n\r\n\r\n  render(){\r\n    return(\r\n      <form className=\"formInput\">\r\n          <input type=\"text\" value={this.state.value} onChange={this.handleClick} className=\"write\" placeholder=\"Write Task\"/>\r\n          <input type=\"submit\" value=\"Add\" className=\"accept\" onClick={this.handleAdd}/>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NewItem;","import React from 'react'\r\nimport './style/Task.css';\r\nconst Task = (props) => (\r\n  <li>\r\n     {props.content}<i onClick={props.doneTask.bind(this, props.id)} className={props.icon}></i>\r\n  </li>\r\n)\r\n\r\nexport default Task;","import React from 'react'\r\nimport Task from '../src/Task'\r\nimport './style/Tasks.css';\r\nclass Tasks extends React.Component {\r\n  state = {\r\n    done: \"fas fa-trash\",\r\n    active: \"far fa-check-circle\"\r\n  }\r\n\r\n  render() {\r\n    let tasks = this.props.tasks;\r\n    if(tasks.length > 0){\r\n    \r\n    if(!this.props.filtr){\r\n      tasks = tasks.filter(task => task.active === true)\r\n    }\r\n    else{\r\n      tasks = tasks.filter(task => task.active === false)\r\n    }\r\n    if(!tasks.length)\r\n      return(<p className=\"negative\">No items avalible</p>)\r\n    else {\r\n    const doneItems =  tasks.map(item => <Task active={item.active} content={item.content} key={item.id} id={item.id} doneTask={this.props.doneTask} icon={this.state.active}/>)\r\n    const Items = tasks.map(item => <Task active={item.active} content={item.content} key={item.id} id={item.id} doneTask={this.props.deleteTask} icon={this.state.done}/>)\r\n    return (\r\n      <ul>\r\n        {this.props.filtr ? Items : doneItems}\r\n      </ul>\r\n    )\r\n\r\n    }\r\n    }\r\n    else\r\n     return(<p className=\"negative\">No items avalible</p>)\r\n}\r\n}\r\n\r\n\r\nexport default Tasks;","import React from 'react'\r\nimport './style/filter.css'\r\nclass Select extends React.Component{\r\n\r\n  state = {\r\n    filter: 0\r\n  }\r\n\r\n  handleSelect = (e) => {\r\n    this.setState({\r\n      filter: e.target.value * 1\r\n    })\r\n\r\n    this.props.changeFilter(e.target.value * 1);\r\n  }\r\n\r\n  render(){\r\n    return(\r\n    <div className=\"filter\">\r\n    <p>Filter</p>\r\n      <select value={this.state.filter * 1} onChange={this.handleSelect}>\r\n        <option value=\"0\">Active</option>\r\n        <option value=\"1\">Done</option>\r\n      </select>\r\n    </div>\r\n    )}\r\n}\r\n\r\nexport default Select;","import React from 'react';\nimport NewItem from '../src/NewItem'\nimport Tasks from '../src/Tasks'\nimport Select from '../src/Select'\nimport './style/App.css';\nimport './style/media.css';\n\nclass App extends React.Component {\n  state = {\n    tasks: [],\n    index: 0,\n    filtr: 0,\n  }\n\n  addTask = (toAdd) =>{\n    let tasks = this.state.tasks;\n    const obj = {content: toAdd, active: true, id: this.state.index + 1}\n    let index = this.state.index + 1;\n    tasks.push(obj);\n    this.setState({\n      tasks,\n      index,\n    })\n  }\n\n  doneTask = id =>{\n    let tasks = this.state.tasks;\n   \n   tasks.forEach(task => {\n     if(task.id === id)\n      task.active= false;\n   })\n\n  this.setState({\n    tasks: tasks\n  })\n}\n\ndeleteTask = id => {\n  let tasks = this.state.tasks;\n   tasks = tasks.filter(task => (task.id !== id))\n   this.setState({\n    tasks: tasks\n  })\n}\n\n  changeFilter = (i) => {\n    this.setState({\n      filtr: i\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"wrapper\">\n        <h1>ToDo List</h1>\n        <NewItem addTask={this.addTask}></NewItem>\n        <Tasks tasks={this.state.tasks} doneTask={this.doneTask} filtr={this.state.filtr} deleteTask={this.deleteTask}></Tasks>\n\n        <Select changeFilter={this.changeFilter}></Select>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}